// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 3beb4722ca
// Version Date: 2019年10月24日 星期四 23时47分48秒 UTC

// Package grpc provides a gRPC client for the SkAppService service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/metaverse/truss/_example"
	"github.com/metaverse/truss/_example/skappservice-service/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.SkAppServiceServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var seckillEndpoint endpoint.Endpoint
	{
		seckillEndpoint = grpctransport.NewClient(
			conn,
			"echo.SkAppService",
			"Seckill",
			EncodeGRPCSeckillRequest,
			DecodeGRPCSeckillResponse,
			pb.SecResponse{},
			clientOptions...,
		).Endpoint()
	}

	var secinfoEndpoint endpoint.Endpoint
	{
		secinfoEndpoint = grpctransport.NewClient(
			conn,
			"echo.SkAppService",
			"SecInfo",
			EncodeGRPCSecInfoRequest,
			DecodeGRPCSecInfoResponse,
			pb.SecInfoResponse{},
			clientOptions...,
		).Endpoint()
	}

	var secinfolistEndpoint endpoint.Endpoint
	{
		secinfolistEndpoint = grpctransport.NewClient(
			conn,
			"echo.SkAppService",
			"SecInfoList",
			EncodeGRPCSecInfoListRequest,
			DecodeGRPCSecInfoListResponse,
			pb.SecInfoListResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		SeckillEndpoint:     seckillEndpoint,
		SecInfoEndpoint:     secinfoEndpoint,
		SecInfoListEndpoint: secinfolistEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCSeckillResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC seckill reply to a user-domain seckill response. Primarily useful in a client.
func DecodeGRPCSeckillResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SecResponse)
	return reply, nil
}

// DecodeGRPCSecInfoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC secinfo reply to a user-domain secinfo response. Primarily useful in a client.
func DecodeGRPCSecInfoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SecInfoResponse)
	return reply, nil
}

// DecodeGRPCSecInfoListResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC secinfolist reply to a user-domain secinfolist response. Primarily useful in a client.
func DecodeGRPCSecInfoListResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SecInfoListResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCSeckillRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain seckill request to a gRPC seckill request. Primarily useful in a client.
func EncodeGRPCSeckillRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.SecRequest)
	return req, nil
}

// EncodeGRPCSecInfoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain secinfo request to a gRPC secinfo request. Primarily useful in a client.
func EncodeGRPCSecInfoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.SecInfoRequest)
	return req, nil
}

// EncodeGRPCSecInfoListRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain secinfolist request to a gRPC secinfolist request. Primarily useful in a client.
func EncodeGRPCSecInfoListRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.SecInfoListRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
